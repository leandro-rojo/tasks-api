{"version":3,"sources":["../../src/controllers/tasks.js"],"names":["getTasks","req","res","connection","query","rows","end","status","json","console","log","err","getTask","params","id","length","sendStatus","getTasksCount","saveTask","body","title","description","results","insertId","deleteTask","updateTask","result"],"mappings":"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","sourcesContent":["import {connect} from '../database' \r\n\r\nconst getTasks = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        const [rows] = await connection.query('SELECT * FROM Tasks');\r\n        connection.end();\r\n        res.status(200).json(rows);\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n}\r\nconst getTask = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        const [rows] = await connection.query('SELECT * FROM Tasks WHERE id = ?',[req.params.id]);\r\n        connection.end();\r\n        rows.length ? res.status(200).json(rows[0]) : res.sendStatus(404);\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n}\r\nconst getTasksCount = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        const [rows] = await connection.query('SELECT COUNT(*) cantidad FROM Tasks');\r\n        connection.end();\r\n        res.status(200).json(rows[0]['cantidad']);\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n}\r\nconst saveTask = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        const [results] = await connection.query('INSERT INTO Tasks (title,description) VALUES (?, ?)', [req.body.title, req.body.description]);\r\n        connection.end();\r\n        res.status(201).json({\r\n            id: results.insertId,\r\n            ...req.body\r\n        });\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n}\r\nconst deleteTask = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        await connection.query('DELETE FROM Tasks WHERE id = ?',[req.params.id]);\r\n        connection.end();\r\n        res.sendStatus(204);\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n}\r\nconst updateTask = async (req, res) => {\r\n    try{\r\n        const connection = await connect()\r\n        const result = await connection.query('UPDATE Tasks SET ? WHERE id = ?',[\r\n            req.body,\r\n            req.params.id\r\n        ]);\r\n        connection.end();\r\n        res.sendStatus(204);\r\n    }\r\n    catch(err){\r\n        connection.end();\r\n        console.log(err);\r\n        res.status(500).json({err});\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    getTasks,\r\n    getTask,\r\n    getTasksCount,\r\n    saveTask,\r\n    updateTask,\r\n    deleteTask\r\n};"],"file":"tasks.js"}